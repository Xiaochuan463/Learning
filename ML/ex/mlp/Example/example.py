#generated by gpt

import numpy as np

# 定义 Sigmoid 激活函数
def sigmoid(x):
    return 1 / (1 + np.exp(-x))

# 定义 Sigmoid 激活函数的导数
def sigmoid_derivative(x):
    return x * (1 - x)

# 输入数据集
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])

# 输出数据集
y = np.array([[0], [1], [1], [0]])

# 设置随机种子，以便结果可重现
np.random.seed(1)

# 初始化权重
# 两个输入，四个隐藏层节点
input_neurons = 2
hidden_neurons = 3
output_neurons = 1

# 使用随机值初始化权重
weights_input_hidden = np.random.uniform(size=(input_neurons, hidden_neurons))
weights_hidden_output = np.random.uniform(size=(hidden_neurons, output_neurons))

# 设置训练次数和学习速率
epochs = 10000
learning_rate = 0.1

# 训练模型
for epoch in range(epochs):
    # 前向传播
    hidden_layer_input = np.dot(X, weights_input_hidden)
    hidden_layer_output = sigmoid(hidden_layer_input)

    output_layer_input = np.dot(hidden_layer_output, weights_hidden_output)
    predicted_output = sigmoid(output_layer_input)

    # 计算误差
    error = y - predicted_output

    # 反向传播
    d_predicted_output = error * sigmoid_derivative(predicted_output)

    error_hidden_layer = d_predicted_output.dot(weights_hidden_output.T)
    d_hidden_layer = error_hidden_layer * sigmoid_derivative(hidden_layer_output)

    # 更新权重
    weights_hidden_output += hidden_layer_output.T.dot(d_predicted_output) * learning_rate
    weights_input_hidden += X.T.dot(d_hidden_layer) * learning_rate

# 打印训练后的输出
print("训练后的输出:")
print(predicted_output)

# 测试新数据
new_input = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
new_output = sigmoid(np.dot(sigmoid(np.dot(new_input, weights_input_hidden)), weights_hidden_output))
print("新数据的输出:")
print(new_output)